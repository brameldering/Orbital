/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose';

/**
 * Lean version of IdSequenceDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `IdSequenceDocument.toObject()`. To avoid conflicts with model names, use the type alias `IdSequenceObject`.
 * ```
 * const idsequenceObject = idsequence.toObject();
 * ```
 */
export type IdSequence = {
  sequenceName: string;
  sequenceCounter: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of IdSequenceDocument (type alias of `IdSequence`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { IdSequence } from "../models"
 * import { IdSequenceObject } from "../interfaces/mongoose.gen.ts"
 *
 * const idsequenceObject: IdSequenceObject = idsequence.toObject();
 * ```
 */
export type IdSequenceObject = IdSequence;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type IdSequenceQuery = mongoose.Query<
  any,
  IdSequenceDocument,
  IdSequenceQueries
> &
  IdSequenceQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `IdSequenceSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type IdSequenceQueries = {};

export type IdSequenceMethods = {};

export type IdSequenceStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const IdSequence = mongoose.model<IdSequenceDocument, IdSequenceModel>("IdSequence", IdSequenceSchema);
 * ```
 */
export type IdSequenceModel = mongoose.Model<
  IdSequenceDocument,
  IdSequenceQueries
> &
  IdSequenceStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new IdSequence schema instances:
 * ```
 * const IdSequenceSchema: IdSequenceSchema = new mongoose.Schema({ ... })
 * ```
 */
export type IdSequenceSchema = mongoose.Schema<
  IdSequenceDocument,
  IdSequenceModel,
  IdSequenceMethods,
  IdSequenceQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const IdSequence = mongoose.model<IdSequenceDocument, IdSequenceModel>("IdSequence", IdSequenceSchema);
 * ```
 */
export type IdSequenceDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  IdSequenceQueries
> &
  IdSequenceMethods & {
    sequenceName: string;
    sequenceCounter: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of OrderOrderItemDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderDocument.toObject()`.
 * ```
 * const orderObject = order.toObject();
 * ```
 */
export type OrderOrderItem = {
  productId: Product['_id'] | Product;
  productName: string;
  imageURL: string;
  price: number;
  qty: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderTotalAmountDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderDocument.toObject()`.
 * ```
 * const orderObject = order.toObject();
 * ```
 */
export type OrderTotalAmount = {
  itemsPrice: number;
  shippingPrice: number;
  taxPrice: number;
  totalPrice: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderDocument.toObject()`. To avoid conflicts with model names, use the type alias `OrderObject`.
 * ```
 * const orderObject = order.toObject();
 * ```
 */
export type Order = {
  sequenceOrderId: string;
  userId: User['_id'] | User;
  orderItems: OrderOrderItem[];
  shippingAddress: {
    address: string;
    city: string;
    postalCode: string;
    country: string;
  };
  paymentMethod: string;
  paymentResult: {
    id?: string;
    status?: string;
    update_time?: string;
    email_address?: string;
  };
  totalAmounts?: OrderTotalAmount;
  isPaid: boolean;
  paidAt?: Date;
  isDelivered: boolean;
  deliveredAt?: Date;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
  user: any;
};

/**
 * Lean version of OrderDocument (type alias of `Order`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Order } from "../models"
 * import { OrderObject } from "../interfaces/mongoose.gen.ts"
 *
 * const orderObject: OrderObject = order.toObject();
 * ```
 */
export type OrderObject = Order;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type OrderQuery = mongoose.Query<any, OrderDocument, OrderQueries> &
  OrderQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `OrderSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type OrderQueries = {};

export type OrderMethods = {};

export type OrderStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Order = mongoose.model<OrderDocument, OrderModel>("Order", OrderSchema);
 * ```
 */
export type OrderModel = mongoose.Model<OrderDocument, OrderQueries> &
  OrderStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Order schema instances:
 * ```
 * const OrderSchema: OrderSchema = new mongoose.Schema({ ... })
 * ```
 */
export type OrderSchema = mongoose.Schema<
  OrderDocument,
  OrderModel,
  OrderMethods,
  OrderQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `OrderDocument["orderItems"]` element.
 */
export type OrderOrderItemDocument = mongoose.Types.Subdocument & {
  productId: ProductDocument['_id'] | ProductDocument;
  productName: string;
  imageURL: string;
  price: number;
  qty: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Order = mongoose.model<OrderDocument, OrderModel>("Order", OrderSchema);
 * ```
 */
export type OrderTotalAmountDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    itemsPrice: number;
    shippingPrice: number;
    taxPrice: number;
    totalPrice: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Order = mongoose.model<OrderDocument, OrderModel>("Order", OrderSchema);
 * ```
 */
export type OrderDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  OrderQueries
> &
  OrderMethods & {
    sequenceOrderId: string;
    userId: UserDocument['_id'] | UserDocument;
    orderItems: mongoose.Types.DocumentArray<OrderOrderItemDocument>;
    shippingAddress: {
      address: string;
      city: string;
      postalCode: string;
      country: string;
    };
    paymentMethod: string;
    paymentResult: {
      id?: string;
      status?: string;
      update_time?: string;
      email_address?: string;
    };
    totalAmounts?: OrderTotalAmountDocument;
    isPaid: boolean;
    paidAt?: Date;
    isDelivered: boolean;
    deliveredAt?: Date;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
    user: any;
  };

/**
 * Lean version of ProductReviewDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProductDocument.toObject()`.
 * ```
 * const productObject = product.toObject();
 * ```
 */
export type ProductReview = {
  userId: User['_id'] | User;
  userName: string;
  rating: number;
  comment: string;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of ProductDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProductDocument.toObject()`. To avoid conflicts with model names, use the type alias `ProductObject`.
 * ```
 * const productObject = product.toObject();
 * ```
 */
export type Product = {
  sequenceProductId: string;
  name: string;
  imageURL?: string;
  brand: string;
  category: string;
  description: string;
  numReviews: number;
  reviews: ProductReview[];
  rating: number;
  price: number;
  countInStock: number;
  userId: User['_id'] | User;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of ProductDocument (type alias of `Product`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Product } from "../models"
 * import { ProductObject } from "../interfaces/mongoose.gen.ts"
 *
 * const productObject: ProductObject = product.toObject();
 * ```
 */
export type ProductObject = Product;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ProductQuery = mongoose.Query<
  any,
  ProductDocument,
  ProductQueries
> &
  ProductQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ProductSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ProductQueries = {};

export type ProductMethods = {};

export type ProductStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Product = mongoose.model<ProductDocument, ProductModel>("Product", ProductSchema);
 * ```
 */
export type ProductModel = mongoose.Model<ProductDocument, ProductQueries> &
  ProductStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Product schema instances:
 * ```
 * const ProductSchema: ProductSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ProductSchema = mongoose.Schema<
  ProductDocument,
  ProductModel,
  ProductMethods,
  ProductQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `ProductDocument["reviews"]` element.
 */
export type ProductReviewDocument = mongoose.Types.Subdocument & {
  userId: UserDocument['_id'] | UserDocument;
  userName: string;
  rating: number;
  comment: string;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Product = mongoose.model<ProductDocument, ProductModel>("Product", ProductSchema);
 * ```
 */
export type ProductDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ProductQueries
> &
  ProductMethods & {
    sequenceProductId: string;
    name: string;
    imageURL?: string;
    brand: string;
    category: string;
    description: string;
    numReviews: number;
    reviews: mongoose.Types.DocumentArray<ProductReviewDocument>;
    rating: number;
    price: number;
    countInStock: number;
    userId: UserDocument['_id'] | UserDocument;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  name: string;
  email: string;
  password: string;
  isAdmin: boolean;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type UserQuery = mongoose.Query<any, UserDocument, UserQueries> &
  UserQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `UserSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type UserQueries = {};

export type UserMethods = {
  matchPassword: (this: UserDocument, ...args: any[]) => any;
};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<
  UserDocument,
  UserModel,
  UserMethods,
  UserQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    name: string;
    email: string;
    password: string;
    isAdmin: boolean;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module 'mongoose' {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
